package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.75

import (
	"PostAndComment/graph/model"
	"context"
	"fmt"
)

// Replies is the resolver for the replies field.
func (r *commentResolver) Replies(ctx context.Context, obj *model.Comment, limit *int32, offset *int32) ([]*model.Comment, error) {
	if obj.Replies == nil {
		return []*model.Comment{}, nil
	}

	var lim, off int32 = 10, 0
	if limit != nil {
		lim = *limit
		if lim < 0 {
			return nil, fmt.Errorf("limit must be non-negative")
		}
	}
	if offset != nil {
		off = *offset
		if off < 0 {
			return nil, fmt.Errorf("offset must be non-negative")
		}
	}

	if int(off) >= len(obj.Replies) {
		return []*model.Comment{}, nil
	}

	end := int(off + lim)
	if end > len(obj.Replies) {
		end = len(obj.Replies)
	}

	return obj.Replies[off:end], nil
}

// AddComment is the resolver for the addComment field.
func (r *mutationResolver) AddComment(ctx context.Context, postID string, parentID *string, text string) (*model.Comment, error) {

	if postID == "" {
		return nil, fmt.Errorf("postID can`t be empty")
	}

	size := len([]rune(text))
	if size > 2000 {
		return nil, fmt.Errorf("message too long: maximum allowed is 2000 characters")
	}

	if text == "" {
		return nil, fmt.Errorf("message must contain at least one character")
	}

	return r.Storage.AddComment(postID, parentID, text)
}

// AddPost is the resolver for the addPost field.
func (r *mutationResolver) NewPost(ctx context.Context, text string, commentsEnabled bool) (*model.Post, error) {
	size := len([]rune(text))
	if size > 2000 {
		return nil, fmt.Errorf("message too long: maximum allowed is 2000 characters")
	}

	if text == "" {
		return nil, fmt.Errorf("message must contain at least one character")
	}

	return r.Storage.NewPost(text, commentsEnabled)
}

// SetCommentsEnabled is the resolver for the setCommentsEnabled field.
func (r *mutationResolver) SetCommentsEnabled(ctx context.Context, postID string, enabled bool) (*model.Post, error) {
	if postID == "" {
		return nil, fmt.Errorf("postID can`t be empty")
	}

	return r.Storage.SetCommentsEnabled(postID, enabled)
}

// Comments is the resolver for the comments field.
func (r *postResolver) Comments(ctx context.Context, obj *model.Post, limit *int32, offset *int32) ([]*model.Comment, error) {
	var lim, off int32 = 10, 0
	if limit != nil {
		lim = *limit
		if lim < 0 {
			return nil, fmt.Errorf("limit must be non-negative")
		}
	}
	if offset != nil {
		off = *offset
		if off < 0 {
			return nil, fmt.Errorf("offset must be non-negative")
		}
	}

	return r.Storage.GetCommentsTree(obj.ID, lim, off)
}

// GetPosts is the resolver for the getPosts field.
func (r *queryResolver) GetPosts(ctx context.Context, limit *int32, offset *int32) ([]*model.Post, error) {
	var lim, off int32 = 10, 0
	if limit != nil {
		lim = *limit
		if lim < 0 {
			return nil, fmt.Errorf("limit must be non-negative")
		}
	}
	if offset != nil {
		off = *offset
		if off < 0 {
			return nil, fmt.Errorf("offset must be non-negative")
		}
	}

	return r.Storage.GetPosts(lim, off)
}

// GetPost is the resolver for the getPost field.
func (r *queryResolver) GetPost(ctx context.Context, postID string) (*model.Post, error) {
	if postID == "" {
		return nil, fmt.Errorf("postID can`t be empty")
	}

	return r.Storage.GetPost(postID)
}

// CommentAdded is the resolver for the commentAdded field.
func (r *subscriptionResolver) CommentAdded(ctx context.Context, postID string) (<-chan *model.Comment, error) {
	if postID == "" {
		return nil, fmt.Errorf("postID can`t be empty")
	}

	ch, unsubscribe, err := r.Storage.SubscribeToComments(postID)
	if err != nil {
		return nil, err
	}

	go func() {
		<-ctx.Done()
		if unsubscribe != nil {
			(*unsubscribe)()
		}
	}()
	return ch, err
}

// Comment returns CommentResolver implementation.
func (r *Resolver) Comment() CommentResolver { return &commentResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Post returns PostResolver implementation.
func (r *Resolver) Post() PostResolver { return &postResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type commentResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type postResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
